// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resume {
  id          String       @id @default(uuid())
  name        String?
  address     Address?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  experiences Experience[]
  projects    Project[]
  educations  Education[]
  skills      Skill[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?      @unique
}

model Address {
  id       String  @id @default(uuid())
  street   String
  state    String
  country  String
  resume   Resume? @relation(fields: [resumeId], references: [id])
  resumeId String? @unique
}

model Experience {
  id          String    @id @default(uuid())
  position    String
  company     String
  start_date  DateTime
  end_date    DateTime?
  description String?
  resume      Resume?   @relation(fields: [resumeId], references: [id])
  resumeId    String?
}

model Project {
  id           String    @id @default(uuid())
  name         String
  organisation String?
  start_date   DateTime?
  end_date     DateTime?
  description  String?
  url          String?
  resume       Resume?   @relation(fields: [resumeId], references: [id])
  resumeId     String?
}

model Skill {
  id       String  @id @default(uuid())
  name     String
  resume   Resume? @relation(fields: [resumeId], references: [id])
  resumeId String? @unique
}

model Education {
  id           String    @id @default(uuid())
  degree       String
  organisation String
  end_date     DateTime?
  wam          Float?
  resume       Resume?   @relation(fields: [resumeId], references: [id])
  resumeId     String?   @unique
}

model Email {
  id      String @id @default(uuid())
  address String @unique
}
